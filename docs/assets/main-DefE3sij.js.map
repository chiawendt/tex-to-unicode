{"version":3,"file":"main-DefE3sij.js","sources":["../../lib/symbols.ts","../../lib/tree.ts","../../node_modules/bread-n-butter/dist/esm/bread-n-butter.js","../../lib/parser.ts","../../lib/index.ts","../../docs-src/main.ts"],"sourcesContent":["const symbols: Record<string, string> = {\n  \"\\\\Alpha\": \"Α\",\n  \"\\\\Beta\": \"Β\",\n  \"\\\\Gamma\": \"Γ\",\n  \"\\\\Delta\": \"Δ\",\n  \"\\\\Epsilon\": \"Ε\",\n  \"\\\\Zeta\": \"Ζ\",\n  \"\\\\Eta\": \"Η\",\n  \"\\\\Theta\": \"Θ\",\n  \"\\\\Iota\": \"I\",\n  \"\\\\Kappa\": \"Κ\",\n  \"\\\\Lambda\": \"Λ\",\n  \"\\\\Mu\": \"Μ\",\n  \"\\\\Nu\": \"Ν\",\n  \"\\\\Xi\": \"Ξ\",\n  \"\\\\Omicron\": \"Ο\",\n  \"\\\\Pi\": \"Π\",\n  \"\\\\Rho\": \"Ρ\",\n  \"\\\\Sigma\": \"Σ\",\n  \"\\\\Tau\": \"Τ\",\n  \"\\\\Upsilon\": \"Υ\",\n  \"\\\\Phi\": \"Φ\",\n  \"\\\\Chi\": \"Χ\",\n  \"\\\\Psi\": \"Ψ\",\n  \"\\\\Omega\": \"Ω\",\n\n  \"\\\\alpha\": \"α\",\n  \"\\\\beta\": \"β\",\n  \"\\\\gamma\": \"γ\",\n  \"\\\\delta\": \"δ\",\n  \"\\\\epsilon\": \"ϵ\",\n  \"\\\\zeta\": \"ζ\",\n  \"\\\\eta\": \"η\",\n  \"\\\\theta\": \"θ\",\n  \"\\\\iota\": \"ι\",\n  \"\\\\kappa\": \"κ\",\n  \"\\\\lambda\": \"λ\",\n  \"\\\\mu\": \"μ\",\n  \"\\\\nu\": \"ν\",\n  \"\\\\xi\": \"ξ\",\n  \"\\\\omicron\": \"ο\",\n  \"\\\\pi\": \"π\",\n  \"\\\\rho\": \"ρ\",\n  \"\\\\sigma\": \"σ\",\n  \"\\\\tau\": \"τ\",\n  \"\\\\upsilon\": \"υ\",\n  \"\\\\phi\": \"ϕ\",\n  \"\\\\chi\": \"χ\",\n  \"\\\\psi\": \"ψ\",\n  \"\\\\omega\": \"ω\",\n\n  \"\\\\varepsilon\": \"ε\",\n  \"\\\\varnothing\": \"∅\",\n  \"\\\\varkappa\": \"ϰ\",\n  \"\\\\varphi\": \"φ\",\n  \"\\\\varpi\": \"ϖ\",\n  \"\\\\varrho\": \"ϱ\",\n  \"\\\\varsigma\": \"ς\",\n  \"\\\\vartheta\": \"ϑ\",\n  \"\\\\neq\": \"≠\",\n  \"\\\\equiv\": \"≡\",\n  \"\\\\not\\\\equiv\": \"≢\",\n  \"\\\\leq\": \"≤\",\n  \"\\\\geq\": \"≥\",\n  \"\\\\leqq\": \"≦\",\n  \"\\\\geqq\": \"≧\",\n  \"\\\\lneqq\": \"≨\",\n  \"\\\\gneqq\": \"≩\",\n  \"\\\\leqslant\": \"⩽\",\n  \"\\\\geqslant\": \"⩾\",\n  \"\\\\ll\": \"≪\",\n  \"\\\\gg\": \"≫\",\n  \"\\\\nless\": \"≮\",\n  \"\\\\ngtr\": \"≯\",\n  \"\\\\nleq\": \"≰\",\n  \"\\\\ngeq\": \"≱\",\n  \"\\\\lessequivlnt\": \"≲\",\n  \"\\\\greaterequivlnt\": \"≳\",\n  \"\\\\prec\": \"≺\",\n  \"\\\\succ\": \"≻\",\n  \"\\\\preccurlyeq\": \"≼\",\n  \"\\\\succcurlyeq\": \"≽\",\n  \"\\\\precapprox\": \"≾\",\n  \"\\\\succapprox\": \"≿\",\n  \"\\\\nprec\": \"⊀\",\n  \"\\\\nsucc\": \"⊁\",\n  \"\\\\sim\": \"∼\",\n  \"\\\\not\\\\sim\": \"≁\",\n  \"\\\\simeq\": \"≃\",\n  \"\\\\not\\\\simeq\": \"≄\",\n  \"\\\\backsim\": \"∽\",\n  \"\\\\lazysinv\": \"∾\",\n  \"\\\\wr\": \"≀\",\n  \"\\\\cong\": \"≅\",\n  \"\\\\not\\\\cong\": \"≇\",\n  \"\\\\approx\": \"≈\",\n  \"\\\\not\\\\approx\": \"≉\",\n  \"\\\\approxeq\": \"≊\",\n  \"\\\\approxnotequal\": \"≆\",\n  \"\\\\tildetrpl\": \"≋\",\n  \"\\\\allequal\": \"≌\",\n  \"\\\\asymp\": \"≍\",\n  \"\\\\doteq\": \"≐\",\n  \"\\\\doteqdot\": \"≑\",\n  \"\\\\lneq\": \"⪇\",\n  \"\\\\gneq\": \"⪈\",\n  \"\\\\preceq\": \"⪯\",\n  \"\\\\succeq\": \"⪰\",\n  \"\\\\precneqq\": \"⪵\",\n  \"\\\\succneqq\": \"⪶\",\n  \"\\\\emptyset\": \"∅\",\n  \"\\\\in\": \"∈\",\n  \"\\\\notin\": \"∉\",\n  \"\\\\not\\\\in\": \"∉\",\n  \"\\\\ni\": \"∋\",\n  \"\\\\not\\\\ni\": \"∌\",\n  \"\\\\subset\": \"⊂\",\n  \"\\\\subseteq\": \"⊆\",\n  \"\\\\not\\\\subset\": \"⊄\",\n  \"\\\\not\\\\subseteq\": \"⊈\",\n  \"\\\\supset\": \"⊃\",\n  \"\\\\supseteq\": \"⊇\",\n  \"\\\\not\\\\supset\": \"⊅\",\n  \"\\\\not\\\\supseteq\": \"⊉\",\n  \"\\\\subsetneq\": \"⊊\",\n  \"\\\\supsetneq\": \"⊋\",\n  \"\\\\exists\": \"∃\",\n  \"\\\\nexists\": \"∄\",\n  \"\\\\not\\\\exists\": \"∄\",\n  \"\\\\forall\": \"∀\",\n  \"\\\\aleph\": \"ℵ\",\n  \"\\\\beth\": \"ℶ\",\n  \"\\\\neg\": \"¬\",\n  \"\\\\wedge\": \"∧\",\n  \"\\\\vee\": \"∨\",\n  \"\\\\veebar\": \"⊻\",\n  \"\\\\land\": \"∧\",\n  \"\\\\lor\": \"∨\",\n  \"\\\\top\": \"⊤\",\n  \"\\\\bot\": \"⊥\",\n  \"\\\\cup\": \"∪\",\n  \"\\\\cap\": \"∩\",\n  \"\\\\bigcup\": \"⋃\",\n  \"\\\\bigcap\": \"⋂\",\n  \"\\\\setminus\": \"∖\",\n  \"\\\\therefore\": \"∴\",\n  \"\\\\because\": \"∵\",\n  \"\\\\Box\": \"□\",\n  \"\\\\models\": \"⊨\",\n  \"\\\\vdash\": \"⊢\",\n\n  \"\\\\rightarrow\": \"→\",\n  \"\\\\Rightarrow\": \"⇒\",\n  \"\\\\leftarrow\": \"←\",\n  \"\\\\Leftarrow\": \"⇐\",\n  \"\\\\uparrow\": \"↑\",\n  \"\\\\Uparrow\": \"⇑\",\n  \"\\\\downarrow\": \"↓\",\n  \"\\\\Downarrow\": \"⇓\",\n  \"\\\\nwarrow\": \"↖\",\n  \"\\\\nearrow\": \"↗\",\n  \"\\\\searrow\": \"↘\",\n  \"\\\\swarrow\": \"↙\",\n  \"\\\\mapsto\": \"↦\",\n  \"\\\\to\": \"→\",\n  \"\\\\leftrightarrow\": \"↔\",\n  \"\\\\hookleftarrow\": \"↩\",\n  \"\\\\Leftrightarrow\": \"⇔\",\n  \"\\\\rightarrowtail\": \"↣\",\n  \"\\\\leftarrowtail\": \"↢\",\n  \"\\\\twoheadrightarrow\": \"↠\",\n  \"\\\\twoheadleftarrow\": \"↞\",\n  \"\\\\hookrightarrow\": \"↪\",\n  \"\\\\rightsquigarrow\": \"⇝\",\n  \"\\\\rightleftharpoons\": \"⇌\",\n  \"\\\\leftrightharpoons\": \"⇋\",\n  \"\\\\rightharpoonup\": \"⇀\",\n  \"\\\\rightharpoondown\": \"⇁\",\n\n  \"\\\\times\": \"×\",\n  \"\\\\div\": \"÷\",\n  \"\\\\infty\": \"∞\",\n  \"\\\\nabla\": \"∇\",\n  \"\\\\partial\": \"∂\",\n  \"\\\\sum\": \"∑\",\n  \"\\\\prod\": \"∏\",\n  \"\\\\coprod\": \"∐\",\n  \"\\\\int\": \"∫\",\n  \"\\\\iint\": \"∬\",\n  \"\\\\iiint\": \"∭\",\n  \"\\\\iiiint\": \"⨌\",\n  \"\\\\oint\": \"∮\",\n  \"\\\\surfintegral\": \"∯\",\n  \"\\\\volintegral\": \"∰\",\n  \"\\\\Re\": \"ℜ\",\n  \"\\\\Im\": \"ℑ\",\n  \"\\\\wp\": \"℘\",\n  \"\\\\mp\": \"∓\",\n  \"\\\\langle\": \"⟨\",\n  \"\\\\rangle\": \"⟩\",\n  \"\\\\lfloor\": \"⌊\",\n  \"\\\\rfloor\": \"⌋\",\n  \"\\\\lceil\": \"⌈\",\n  \"\\\\rceil\": \"⌉\",\n  \"\\\\|\": \"‖\",\n\n  \"\\\\mathbb{a}\": \"𝕒\",\n  \"\\\\mathbb{A}\": \"𝔸\",\n  \"\\\\mathbb{b}\": \"𝕓\",\n  \"\\\\mathbb{B}\": \"𝔹\",\n  \"\\\\mathbb{c}\": \"𝕔\",\n  \"\\\\mathbb{C}\": \"ℂ\",\n  \"\\\\mathbb{d}\": \"𝕕\",\n  \"\\\\mathbb{D}\": \"𝔻\",\n  \"\\\\mathbb{e}\": \"𝕖\",\n  \"\\\\mathbb{E}\": \"𝔼\",\n  \"\\\\mathbb{f}\": \"𝕗\",\n  \"\\\\mathbb{F}\": \"𝔽\",\n  \"\\\\mathbb{g}\": \"𝕘\",\n  \"\\\\mathbb{G}\": \"𝔾\",\n  \"\\\\mathbb{h}\": \"𝕙\",\n  \"\\\\mathbb{H}\": \"ℍ\",\n  \"\\\\mathbb{i}\": \"𝕚\",\n  \"\\\\mathbb{I}\": \"𝕀\",\n  \"\\\\mathbb{j}\": \"𝕛\",\n  \"\\\\mathbb{J}\": \"𝕁\",\n  \"\\\\mathbb{k}\": \"𝕜\",\n  \"\\\\mathbb{K}\": \"𝕂\",\n  \"\\\\mathbb{l}\": \"𝕝\",\n  \"\\\\mathbb{L}\": \"𝕃\",\n  \"\\\\mathbb{m}\": \"𝕞\",\n  \"\\\\mathbb{M}\": \"𝕄\",\n  \"\\\\mathbb{n}\": \"𝕟\",\n  \"\\\\mathbb{N}\": \"ℕ\",\n  \"\\\\mathbb{o}\": \"𝕠\",\n  \"\\\\mathbb{O}\": \"𝕆\",\n  \"\\\\mathbb{p}\": \"𝕡\",\n  \"\\\\mathbb{P}\": \"ℙ\",\n  \"\\\\mathbb{q}\": \"𝕢\",\n  \"\\\\mathbb{Q}\": \"ℚ\",\n  \"\\\\mathbb{r}\": \"𝕣\",\n  \"\\\\mathbb{R}\": \"ℝ\",\n  \"\\\\mathbb{s}\": \"𝕤\",\n  \"\\\\mathbb{S}\": \"𝕊\",\n  \"\\\\mathbb{t}\": \"𝕥\",\n  \"\\\\mathbb{T}\": \"𝕋\",\n  \"\\\\mathbb{u}\": \"𝕦\",\n  \"\\\\mathbb{U}\": \"𝕌\",\n  \"\\\\mathbb{v}\": \"𝕧\",\n  \"\\\\mathbb{V}\": \"𝕍\",\n  \"\\\\mathbb{x}\": \"𝕩\",\n  \"\\\\mathbb{X}\": \"𝕏\",\n  \"\\\\mathbb{y}\": \"𝕪\",\n  \"\\\\mathbb{Y}\": \"𝕐\",\n  \"\\\\mathbb{z}\": \"𝕫\",\n  \"\\\\mathbb{Z}\": \"ℤ\",\n  \"\\\\mathbb{0}\": \"𝟘\",\n  \"\\\\mathbb{1}\": \"𝟙\",\n  \"\\\\mathbb{2}\": \"𝟚\",\n  \"\\\\mathbb{3}\": \"𝟛\",\n  \"\\\\mathbb{4}\": \"𝟜\",\n  \"\\\\mathbb{5}\": \"𝟝\",\n  \"\\\\mathbb{6}\": \"𝟞\",\n  \"\\\\mathbb{7}\": \"𝟟\",\n  \"\\\\mathbb{8}\": \"𝟠\",\n  \"\\\\mathbb{9}\": \"𝟡\",\n\n  \"\\\\mathfrak{a}\": \"𝔞\",\n  \"\\\\mathfrak{A}\": \"𝔄\",\n  \"\\\\mathfrak{b}\": \"𝔟\",\n  \"\\\\mathfrak{B}\": \"𝔅\",\n  \"\\\\mathfrak{c}\": \"𝔠\",\n  \"\\\\mathfrak{C}\": \"ℭ\",\n  \"\\\\mathfrak{d}\": \"𝔡\",\n  \"\\\\mathfrak{D}\": \"𝔇\",\n  \"\\\\mathfrak{e}\": \"𝔢\",\n  \"\\\\mathfrak{E}\": \"𝔈\",\n  \"\\\\mathfrak{f}\": \"𝔣\",\n  \"\\\\mathfrak{F}\": \"𝔉\",\n  \"\\\\mathfrak{g}\": \"𝔤\",\n  \"\\\\mathfrak{G}\": \"𝔊\",\n  \"\\\\mathfrak{h}\": \"𝔥\",\n  \"\\\\mathfrak{H}\": \"ℌ\",\n  \"\\\\mathfrak{i}\": \"𝔦\",\n  \"\\\\mathfrak{I}\": \"ℑ\",\n  \"\\\\mathfrak{j}\": \"𝔧\",\n  \"\\\\mathfrak{J}\": \"𝔍\",\n  \"\\\\mathfrak{k}\": \"𝔨\",\n  \"\\\\mathfrak{K}\": \"𝔎\",\n  \"\\\\mathfrak{l}\": \"𝔩\",\n  \"\\\\mathfrak{L}\": \"𝔏\",\n  \"\\\\mathfrak{m}\": \"𝔪\",\n  \"\\\\mathfrak{M}\": \"𝔐\",\n  \"\\\\mathfrak{n}\": \"𝔫\",\n  \"\\\\mathfrak{N}\": \"𝔑\",\n  \"\\\\mathfrak{o}\": \"𝔬\",\n  \"\\\\mathfrak{O}\": \"𝔒\",\n  \"\\\\mathfrak{p}\": \"𝔭\",\n  \"\\\\mathfrak{P}\": \"𝔓\",\n  \"\\\\mathfrak{q}\": \"𝔮\",\n  \"\\\\mathfrak{Q}\": \"𝔔\",\n  \"\\\\mathfrak{r}\": \"𝔯\",\n  \"\\\\mathfrak{R}\": \"ℜ\",\n  \"\\\\mathfrak{s}\": \"𝔰\",\n  \"\\\\mathfrak{S}\": \"𝔖\",\n  \"\\\\mathfrak{t}\": \"𝔱\",\n  \"\\\\mathfrak{T}\": \"𝔗\",\n  \"\\\\mathfrak{u}\": \"𝔲\",\n  \"\\\\mathfrak{U}\": \"𝔘\",\n  \"\\\\mathfrak{v}\": \"𝔳\",\n  \"\\\\mathfrak{V}\": \"𝔙\",\n  \"\\\\mathfrak{x}\": \"𝔵\",\n  \"\\\\mathfrak{X}\": \"𝔛\",\n  \"\\\\mathfrak{y}\": \"𝔶\",\n  \"\\\\mathfrak{Y}\": \"𝔜\",\n  \"\\\\mathfrak{z}\": \"𝔷\",\n  \"\\\\mathfrak{Z}\": \"ℨ\",\n\n  \"\\\\mathcal{a}\": \"𝒶\",\n  \"\\\\mathcal{A}\": \"𝒜\",\n  \"\\\\mathcal{b}\": \"𝒷\",\n  \"\\\\mathcal{B}\": \"ℬ\",\n  \"\\\\mathcal{c}\": \"𝒸\",\n  \"\\\\mathcal{C}\": \"𝒞\",\n  \"\\\\mathcal{d}\": \"𝒹\",\n  \"\\\\mathcal{D}\": \"𝒟\",\n  \"\\\\mathcal{e}\": \"ℯ\",\n  \"\\\\mathcal{E}\": \"ℰ\",\n  \"\\\\mathcal{f}\": \"𝒻\",\n  \"\\\\mathcal{F}\": \"ℱ\",\n  \"\\\\mathcal{g}\": \"ℊ\",\n  \"\\\\mathcal{G}\": \"𝒢\",\n  \"\\\\mathcal{h}\": \"𝒽\",\n  \"\\\\mathcal{H}\": \"ℋ\",\n  \"\\\\mathcal{i}\": \"𝒾\",\n  \"\\\\mathcal{I}\": \"ℐ\",\n  \"\\\\mathcal{j}\": \"𝒿\",\n  \"\\\\mathcal{J}\": \"𝒥\",\n  \"\\\\mathcal{k}\": \"𝓀\",\n  \"\\\\mathcal{K}\": \"𝒦\",\n  \"\\\\mathcal{l}\": \"𝓁\",\n  \"\\\\mathcal{L}\": \"ℒ\",\n  \"\\\\mathcal{m}\": \"𝓂\",\n  \"\\\\mathcal{M}\": \"ℳ\",\n  \"\\\\mathcal{n}\": \"𝓃\",\n  \"\\\\mathcal{N}\": \"𝒩\",\n  \"\\\\mathcal{o}\": \"ℴ\",\n  \"\\\\mathcal{O}\": \"𝒪\",\n  \"\\\\mathcal{p}\": \"𝓅\",\n  \"\\\\mathcal{P}\": \"𝒫\",\n  \"\\\\mathcal{q}\": \"𝓆\",\n  \"\\\\mathcal{Q}\": \"𝒬\",\n  \"\\\\mathcal{r}\": \"𝓇\",\n  \"\\\\mathcal{R}\": \"ℛ\",\n  \"\\\\mathcal{s}\": \"𝓈\",\n  \"\\\\mathcal{S}\": \"𝒮\",\n  \"\\\\mathcal{t}\": \"𝓉\",\n  \"\\\\mathcal{T}\": \"𝒯\",\n  \"\\\\mathcal{u}\": \"𝓊\",\n  \"\\\\mathcal{U}\": \"𝒰\",\n  \"\\\\mathcal{v}\": \"𝓋\",\n  \"\\\\mathcal{V}\": \"𝒱\",\n  \"\\\\mathcal{w}\": \"𝓌\",\n  \"\\\\mathcal{W}\": \"𝒲\",\n  \"\\\\mathcal{x}\": \"𝓍\",\n  \"\\\\mathcal{X}\": \"𝒳\",\n  \"\\\\mathcal{y}\": \"𝓎\",\n  \"\\\\mathcal{Y}\": \"𝒴\",\n  \"\\\\mathcal{z}\": \"𝓏\",\n  \"\\\\mathcal{Z}\": \"𝒵\",\n\n  _0: \"₀\",\n  _1: \"₁\",\n  _2: \"₂\",\n  _3: \"₃\",\n  _4: \"₄\",\n  _5: \"₅\",\n  _6: \"₆\",\n  _7: \"₇\",\n  _8: \"₈\",\n  _9: \"₉\",\n  \"^0\": \"⁰\",\n  \"^1\": \"¹\",\n  \"^2\": \"²\",\n  \"^3\": \"³\",\n  \"^4\": \"⁴\",\n  \"^5\": \"⁵\",\n  \"^6\": \"⁶\",\n  \"^7\": \"⁷\",\n  \"^8\": \"⁸\",\n  \"^9\": \"⁹\",\n\n  \"_+\": \"₊\",\n  \"_-\": \"₋\",\n  \"_(\": \"₍\",\n  \"_)\": \"₎\",\n  \"^+\": \"⁺\",\n  \"^-\": \"⁻\",\n  \"^(\": \"⁽\",\n  \"^)\": \"⁾\",\n\n  _a: \"ₐ\",\n  _e: \"ₑ\",\n  _h: \"ₕ\",\n  _i: \"ᵢ\",\n  _j: \"ⱼ\",\n  _k: \"ₖ\",\n  _l: \"ₗ\",\n  _m: \"ₘ\",\n  _n: \"ₙ\",\n  _o: \"ₒ\",\n  _p: \"ₚ\",\n  _r: \"ᵣ\",\n  _s: \"ₛ\",\n  _t: \"ₜ\",\n  _u: \"ᵤ\",\n  _v: \"ᵥ\",\n  _x: \"ₓ\",\n  \"^a\": \"ᵃ\",\n  \"^b\": \"ᵇ\",\n  \"^c\": \"ᶜ\",\n  \"^d\": \"ᵈ\",\n  \"^e\": \"ᵉ\",\n  \"^f\": \"ᶠ\",\n  \"^g\": \"ᵍ\",\n  \"^h\": \"ʰ\",\n  \"^i\": \"^i\",\n  \"^j\": \"ʲ\",\n  \"^k\": \"ᵏ\",\n  \"^l\": \"ˡ\",\n  \"^m\": \"ᵐ\",\n  \"^n\": \"ⁿ\",\n  \"^o\": \"ᵒ\",\n  \"^p\": \"ᵖ\",\n  \"^r\": \"ʳ\",\n  \"^s\": \"ˢ\",\n  \"^t\": \"ᵗ\",\n  \"^u\": \"ᵘ\",\n  \"^v\": \"ᵛ\",\n  \"^w\": \"ʷ\",\n  \"^x\": \"ˣ\",\n  \"^y\": \"ʸ\",\n  \"^z\": \"ᶻ\",\n\n  \"\\\\pm\": \"±\",\n  \"\\\\dotplus\": \"∔\",\n  \"\\\\bullet\": \"∙\",\n  \"\\\\cdot\": \"⋅\",\n  \"\\\\oplus\": \"⊕\",\n  \"\\\\ominus\": \"⊖\",\n  \"\\\\otimes\": \"⊗\",\n  \"\\\\oslash\": \"⊘\",\n  \"\\\\odot\": \"⊙\",\n  \"\\\\circ\": \"∘\",\n  \"\\\\surd\": \"√\",\n  \"\\\\propto\": \"∝\",\n  \"\\\\angle\": \"∠\",\n  \"\\\\measuredangle\": \"∡\",\n  \"\\\\sphericalangle\": \"∢\",\n  \"\\\\mid\": \"∣\",\n  \"\\\\nmid\": \"∤\",\n  \"\\\\not\\\\mid\": \"∤\",\n  \"\\\\parallel\": \"∥\",\n  \"\\\\nparallel\": \"∦\",\n  \"\\\\not\\\\parallel\": \"∦\",\n  \"\\\\flat\": \"♭\",\n  \"\\\\natural\": \"♮\",\n  \"\\\\sharp\": \"♯\",\n};\n\nexport default symbols;\n","// Used to find all DOM nodes in window.getSelection()\nfunction findNodesBetweenNodes(u: Node, v: Node): Node[] {\n  const ancestor = findLowestCommonAncestor(u, v);\n  const childrenList = findChildrenList(ancestor);\n  const [i, j] = [childrenList.indexOf(u), childrenList.indexOf(v)].sort();\n  return childrenList.slice(i, j + 1);\n}\n\nfunction findAncestorChain(node: Node): Node[] {\n  const chain: Node[] = [];\n  let currentNode: Node | null = node;\n  chain.push(currentNode);\n  while (currentNode.parentNode) {\n    currentNode = currentNode.parentNode;\n    chain.push(currentNode);\n  }\n  return chain.reverse();\n}\n\nfunction findLowestCommonAncestor(u: Node, v: Node): Node {\n  const uChain = findAncestorChain(u);\n  const vChain = findAncestorChain(v);\n\n  let i = 0;\n  for (; i < uChain.length; i++) {\n    if (uChain[i] !== vChain[i]) {\n      break;\n    }\n  }\n  return uChain[i - 1];\n}\n\nfunction findChildrenList(node: Node): Node[] {\n  const list: Node[] = [];\n  const find = (n: Node | null) => {\n    if (!n) return;\n    list.push(n);\n    for (const child of Array.from(n.childNodes || [])) {\n      find(child);\n    }\n  };\n  find(node);\n  return list;\n}\n\nexport { findLowestCommonAncestor, findNodesBetweenNodes, findChildrenList, findAncestorChain };\n","/**\n * Represents a parsing action; typically not created directly via `new`.\n */\nexport class Parser {\n    /**\n     * Creates a new custom parser that performs the given parsing action.\n     */\n    constructor(action) {\n        this.action = action;\n    }\n    /**\n     * Returns a parse result with either the value or error information.\n     */\n    parse(input) {\n        const location = { index: 0, line: 1, column: 1 };\n        const context = new Context({ input, location });\n        const result = this.skip(eof).action(context);\n        if (result.type === \"ActionOK\") {\n            return {\n                type: \"ParseOK\",\n                value: result.value,\n            };\n        }\n        return {\n            type: \"ParseFail\",\n            location: result.furthest,\n            expected: result.expected,\n        };\n    }\n    /**\n     * Returns the parsed result or throws an error.\n     */\n    tryParse(input) {\n        const result = this.parse(input);\n        if (result.type === \"ParseOK\") {\n            return result.value;\n        }\n        const { expected, location } = result;\n        const { line, column } = location;\n        const message = `parse error at line ${line} column ${column}: ` +\n            `expected ${expected.join(\", \")}`;\n        throw new Error(message);\n    }\n    /**\n     * Combines two parsers one after the other, yielding the results of both in\n     * an array.\n     */\n    and(parserB) {\n        return new Parser((context) => {\n            const a = this.action(context);\n            if (a.type === \"ActionFail\") {\n                return a;\n            }\n            context = context.moveTo(a.location);\n            const b = context.merge(a, parserB.action(context));\n            if (b.type === \"ActionOK\") {\n                const value = [a.value, b.value];\n                return context.merge(b, context.ok(b.location.index, value));\n            }\n            return b;\n        });\n    }\n    /** Parse both and return the value of the first */\n    skip(parserB) {\n        return this.and(parserB).map(([a]) => a);\n    }\n    /** Parse both and return the value of the second */\n    next(parserB) {\n        return this.and(parserB).map(([, b]) => b);\n    }\n    /**\n     * Try to parse using the current parser. If that fails, parse using the\n     * second parser.\n     */\n    or(parserB) {\n        return new Parser((context) => {\n            const a = this.action(context);\n            if (a.type === \"ActionOK\") {\n                return a;\n            }\n            return context.merge(a, parserB.action(context));\n        });\n    }\n    /**\n     * Parse using the current parser. If it succeeds, pass the value to the\n     * callback function, which returns the next parser to use.\n     */\n    chain(fn) {\n        return new Parser((context) => {\n            const a = this.action(context);\n            if (a.type === \"ActionFail\") {\n                return a;\n            }\n            const parserB = fn(a.value);\n            context = context.moveTo(a.location);\n            return context.merge(a, parserB.action(context));\n        });\n    }\n    /**\n     * Yields the value from the parser after being called with the callback.\n     */\n    map(fn) {\n        return this.chain((a) => {\n            return ok(fn(a));\n        });\n    }\n    /**\n     * Returns the callback called with the parser.\n     */\n    thru(fn) {\n        return fn(this);\n    }\n    /**\n     * Returns a parser which parses the same value, but discards other error\n     * messages, using the ones supplied instead.\n     */\n    desc(expected) {\n        return new Parser((context) => {\n            const result = this.action(context);\n            if (result.type === \"ActionOK\") {\n                return result;\n            }\n            return { type: \"ActionFail\", furthest: result.furthest, expected };\n        });\n    }\n    /**\n     * Wraps the current parser with before & after parsers.\n     */\n    wrap(before, after) {\n        return before.next(this).skip(after);\n    }\n    /**\n     * Ignores content before and after the current parser, based on the supplied\n     * parser.\n     */\n    trim(beforeAndAfter) {\n        return this.wrap(beforeAndAfter, beforeAndAfter);\n    }\n    /**\n     * Repeats the current parser between min and max times, yielding the results\n     * in an array.\n     */\n    repeat(min = 0, max = Infinity) {\n        if (!isRangeValid(min, max)) {\n            throw new Error(`repeat: bad range (${min} to ${max})`);\n        }\n        if (min === 0) {\n            return this.repeat(1, max).or(ok([]));\n        }\n        return new Parser((context) => {\n            const items = [];\n            let result = this.action(context);\n            if (result.type === \"ActionFail\") {\n                return result;\n            }\n            while (result.type === \"ActionOK\" && items.length < max) {\n                items.push(result.value);\n                if (result.location.index === context.location.index) {\n                    throw new Error(\"infinite loop detected; don't call .repeat() with parsers that can accept zero characters\");\n                }\n                context = context.moveTo(result.location);\n                result = context.merge(result, this.action(context));\n            }\n            if (result.type === \"ActionFail\" && items.length < min) {\n                return result;\n            }\n            return context.merge(result, context.ok(context.location.index, items));\n        });\n    }\n    /**\n     * Returns a parser that parses between min and max times, separated by the separator\n     * parser supplied.\n     */\n    sepBy(separator, min = 0, max = Infinity) {\n        if (!isRangeValid(min, max)) {\n            throw new Error(`sepBy: bad range (${min} to ${max})`);\n        }\n        if (min === 0) {\n            return this.sepBy(separator, 1, max).or(ok([]));\n        }\n        // We also know that min=1 due to previous checks, so we can skip the call\n        // to `repeat` here\n        if (max === 1) {\n            return this.map((x) => [x]);\n        }\n        return this.chain((first) => {\n            return separator\n                .next(this)\n                .repeat(min - 1, max - 1)\n                .map((rest) => {\n                return [first, ...rest];\n            });\n        });\n    }\n    /**\n     * Returns a parser that adds name and start/end location metadata.\n     */\n    node(name) {\n        return all(location, this, location).map(([start, value, end]) => {\n            const type = \"ParseNode\";\n            return { type, name, value, start, end };\n        });\n    }\n}\nfunction isRangeValid(min, max) {\n    return (min <= max &&\n        min >= 0 &&\n        max >= 0 &&\n        Number.isInteger(min) &&\n        min !== Infinity &&\n        (Number.isInteger(max) || max === Infinity));\n}\n/**\n * Parser that yields the current `SourceLocation`, containing properties\n * `index`, `line` and `column`.\n */\nexport const location = new Parser((context) => {\n    return context.ok(context.location.index, context.location);\n});\n/**\n * Returns a parser that yields the given value and consumes no input.\n */\nexport function ok(value) {\n    return new Parser((context) => {\n        return context.ok(context.location.index, value);\n    });\n}\n/**\n * Returns a parser that fails with the given messages and consumes no input.\n */\nexport function fail(expected) {\n    return new Parser((context) => {\n        return context.fail(context.location.index, expected);\n    });\n}\n/**\n * This parser succeeds if the input has already been fully parsed.\n */\nexport const eof = new Parser((context) => {\n    if (context.location.index < context.input.length) {\n        return context.fail(context.location.index, [\"<EOF>\"]);\n    }\n    return context.ok(context.location.index, \"<EOF>\");\n});\n/** Returns a parser that matches the exact text supplied. */\nexport function text(string) {\n    return new Parser((context) => {\n        const start = context.location.index;\n        const end = start + string.length;\n        if (context.input.slice(start, end) === string) {\n            return context.ok(end, string);\n        }\n        return context.fail(start, [string]);\n    });\n}\n/**\n * Returns a parser that matches the entire regular expression at the current\n * parser position.\n */\nexport function match(regexp) {\n    for (const flag of regexp.flags) {\n        switch (flag) {\n            case \"i\": // ignoreCase\n            case \"s\": // dotAll\n            case \"m\": // multiline\n            case \"u\": // unicode\n                continue;\n            default:\n                throw new Error(\"only the regexp flags 'imsu' are supported\");\n        }\n    }\n    const sticky = new RegExp(regexp.source, regexp.flags + \"y\");\n    return new Parser((context) => {\n        const start = context.location.index;\n        sticky.lastIndex = start;\n        const match = context.input.match(sticky);\n        if (match) {\n            const end = start + match[0].length;\n            const string = context.input.slice(start, end);\n            return context.ok(end, string);\n        }\n        return context.fail(start, [String(regexp)]);\n    });\n}\n/** Parse all items, returning their values in the same order. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function all(...parsers) {\n    // TODO: This could be optimized with a custom parser, but I should probably add\n    // benchmarking first to see if it really matters enough to rewrite it\n    return parsers.reduce((acc, p) => {\n        return acc.chain((array) => {\n            return p.map((value) => {\n                return [...array, value];\n            });\n        });\n    }, ok([]));\n}\n/** Parse using the parsers given, returning the first one that succeeds. */\nexport function choice(...parsers) {\n    // TODO: This could be optimized with a custom parser, but I should probably add\n    // benchmarking first to see if it really matters enough to rewrite it\n    return parsers.reduce((acc, p) => {\n        return acc.or(p);\n    });\n}\n/**\n * Takes a lazily invoked callback that returns a parser, so you can create\n * recursive parsers.\n */\nexport function lazy(fn) {\n    // NOTE: This parsing action overwrites itself on the specified parser. We're\n    // assuming that the same parser won't be returned to multiple `lazy` calls. I\n    // never heard of such a thing happening in Parsimmon, and it doesn't seem\n    // likely to happen here either. I assume this is faster than using variable\n    // closure and an `if`-statement here, but I honestly don't know.\n    const parser = new Parser((context) => {\n        parser.action = fn().action;\n        return parser.action(context);\n    });\n    return parser;\n}\nfunction union(a, b) {\n    return [...new Set([...a, ...b])];\n}\n/**\n * Represents the current parsing context.\n */\nclass Context {\n    constructor(options) {\n        this.input = options.input;\n        this.location = options.location;\n    }\n    /**\n     * Returns a new context with the supplied location and the current input.\n     */\n    moveTo(location) {\n        return new Context({\n            input: this.input,\n            location,\n        });\n    }\n    _internal_move(index) {\n        if (index === this.location.index) {\n            return this.location;\n        }\n        const start = this.location.index;\n        const end = index;\n        const chunk = this.input.slice(start, end);\n        let { line, column } = this.location;\n        for (const ch of chunk) {\n            if (ch === \"\\n\") {\n                line++;\n                column = 1;\n            }\n            else {\n                column++;\n            }\n        }\n        return { index, line, column };\n    }\n    /**\n     * Represents a successful parse ending before the given `index`, with the\n     * specified `value`.\n     */\n    ok(index, value) {\n        return {\n            type: \"ActionOK\",\n            value,\n            location: this._internal_move(index),\n            furthest: { index: -1, line: -1, column: -1 },\n            expected: [],\n        };\n    }\n    /**\n     * Represents a failed parse starting at the given `index`, with the specified\n     * list `expected` messages (note: this list usually only has one item).\n     */\n    fail(index, expected) {\n        return {\n            type: \"ActionFail\",\n            furthest: this._internal_move(index),\n            expected,\n        };\n    }\n    /**\n     * Merge two sequential `ActionResult`s so that the `expected` and location data\n     * is preserved correctly.\n     */\n    merge(a, b) {\n        if (b.furthest.index > a.furthest.index) {\n            return b;\n        }\n        const expected = b.furthest.index === a.furthest.index\n            ? union(a.expected, b.expected)\n            : a.expected;\n        if (b.type === \"ActionOK\") {\n            return {\n                type: \"ActionOK\",\n                location: b.location,\n                value: b.value,\n                furthest: a.furthest,\n                expected,\n            };\n        }\n        return {\n            type: \"ActionFail\",\n            furthest: a.furthest,\n            expected,\n        };\n    }\n}\n","import * as bnb from \"bread-n-butter\";\n\nexport interface ASTNode {\n  type: string;\n  start: number;\n  end: number;\n}\n\nexport interface PlainTextNode extends ASTNode {\n  type: \"PlainText\";\n  value: string;\n}\n\nexport interface CurlyGroupNode extends ASTNode {\n  type: \"CurlyGroup\";\n  value: string;\n}\n\nexport interface NullaryMacroNode extends ASTNode {\n  type: \"NullaryMacro\";\n  macro: string;\n}\n\nexport interface UnaryMacroNode extends ASTNode {\n  type: \"UnaryMacro\";\n  macro: string;\n  argument: ASTNode;\n}\n\nexport interface SuperscriptNode extends ASTNode {\n  type: \"Superscript\";\n  content: string;\n}\n\nexport interface SubscriptNode extends ASTNode {\n  type: \"Subscript\";\n  content: string;\n}\n\nexport interface ProgramNode extends ASTNode {\n  type: \"Program\";\n  body: ASTNode[];\n}\n\nexport type TexNode =\n  | PlainTextNode\n  | CurlyGroupNode\n  | NullaryMacroNode\n  | UnaryMacroNode\n  | SuperscriptNode\n  | SubscriptNode\n  | ProgramNode;\n\nfunction makeNode(type: string) {\n  return function makeNodeWrapper(parser: any) {\n    return bnb\n      .all(bnb.location, parser, bnb.location)\n      .map(function makeNode_([start, value, end]: [any, any, any]) {\n        return {\n          type,\n          start: start.index,\n          end: end.index,\n          // @ts-ignore\n          ...value,\n        };\n      });\n  };\n}\n\nconst Spaces = bnb.match(/\\s*/);\n\nconst Superscript = bnb\n  .all(bnb.match(/\\^\\s*/), bnb.choice(bnb.match(/{[a-zA-Z0-9+-]+}/), bnb.match(/[a-zA-Z0-9+-]/)))\n  .map(([, b]: [any, string]) => ({\n    content: b,\n  }))\n  .thru(makeNode(\"Superscript\"));\n\nconst Subscript = bnb\n  .all(bnb.match(/_\\s*/), bnb.choice(bnb.match(/{[a-zA-Z0-9+-]+}/), bnb.match(/[a-zA-Z0-9+-]/)))\n  .map(([_, b]: [any, string]) => {\n    return {\n      content: b,\n    };\n  })\n  .thru(makeNode(\"Subscript\"));\n\nconst NullaryMacro = bnb\n  .choice(bnb.match(/\\\\[a-zA-Z]+/), bnb.match(/\\\\\\|/))\n  .map((x: string) => {\n    return {\n      macro: x,\n    };\n  })\n  .thru(makeNode(\"NullaryMacro\"));\n\nconst CurlyGroup = bnb\n  .match(/\\{.*?\\}/)\n  .map((x: string) => ({ value: x }))\n  .thru(makeNode(\"CurlyGroup\"));\n\nconst UnaryMacro = bnb\n  .all(\n    bnb.choice(\n      bnb.match(/\\\\mathbb(?![a-zA-Z])/),\n      bnb.match(/\\\\mathfrak(?![a-zA-Z])/),\n      bnb.match(/\\\\mathcal(?![a-zA-Z])/),\n      bnb.match(/\\\\not(?![a-zA-Z])/)\n    ),\n    Spaces,\n    bnb.choice(\n      CurlyGroup,\n      NullaryMacro,\n      bnb\n        .match(/[a-zA-Z0-9]/)\n        .map((x) => ({ value: x }))\n        .thru(makeNode(\"PlainText\"))\n    )\n  )\n  .map(([a, _, c]: [string, any, ASTNode]) => ({\n    macro: a,\n    argument: c,\n  }))\n  .thru(makeNode(\"UnaryMacro\"));\n\nconst Illegal = bnb\n  .match(/[\\^_\\\\]/)\n  .map((r: string) => ({\n    value: r,\n  }))\n  .thru(makeNode(\"PlainText\"));\n\nconst PlainText = bnb\n  .match(/[^_^\\\\]+/)\n  .map((x: string) => ({ value: x }))\n  .thru(makeNode(\"PlainText\"));\n\nconst Program = bnb\n  .choice(Superscript, Subscript, UnaryMacro, NullaryMacro, Illegal, PlainText)\n  .repeat()\n  .map((nodes: ASTNode[]) => {\n    return {\n      body: nodes,\n    };\n  })\n  .thru(makeNode(\"Program\"));\n\nexport default Program;\n","import symbols from \"./symbols.js\";\nimport { findNodesBetweenNodes } from \"./tree.js\";\nimport parser from \"./parser.js\";\nimport type { TexNode, ASTNode } from \"./parser.js\";\n\nexport interface Options {\n  subscripts?: boolean;\n}\n\n/**\n * Check if two interval overlaps.\n */\nfunction overlaps([a, b]: [number, number], [c, d]: [number, number]): boolean {\n  return (\n    (c <= a && a < d) || (c <= b - 1 && b - 1 < d) || (a <= c && c < b) || (a <= d - 1 && d - 1 < b)\n  );\n}\n\nfunction debrackets(s: string): string {\n  s = s.trim();\n  if (s[0] === \"{\" && s[s.length - 1] === \"}\") {\n    return debrackets(s.slice(1, s.length - 1));\n  }\n  return s;\n}\n\nfunction printSource(source: string, node: ASTNode): string {\n  return source.slice(node.start, node.end);\n}\n\nfunction printNode(source: string, node: TexNode, options: Options = {}): string {\n  switch (node.type) {\n    case \"PlainText\":\n    case \"CurlyGroup\": {\n      return printSource(source, node);\n    }\n    case \"UnaryMacro\": {\n      const arugmentText = printSource(source, node.argument);\n\n      const key =\n        node.macro === \"\\\\not\"\n          ? `${node.macro}${debrackets(arugmentText)}`\n          : `${node.macro}{${debrackets(arugmentText)}}`;\n\n      return symbols[key] || printSource(source, node);\n    }\n    case \"NullaryMacro\": {\n      return symbols[node.macro] || printSource(source, node);\n    }\n    case \"Subscript\":\n    case \"Superscript\": {\n      if (!options.subscripts) {\n        return printSource(source, node);\n      }\n\n      let r = \"\";\n      for (const c of debrackets(node.content)) {\n        const h = node.type === \"Subscript\" ? \"_\" : \"^\";\n        const v = symbols[`${h}${c}`];\n        if (v === undefined) {\n          return printSource(source, node);\n        }\n        r += v;\n      }\n      return r;\n    }\n  }\n\n  console.error(node);\n  throw new Error(\"unhandled case\");\n}\n\nfunction print(\n  source: string,\n  ast: TexNode,\n  selectStart: number,\n  selectEnd: number,\n  options: Options = {}\n) {\n  const nodes = (ast as any).body as ASTNode[];\n  let cursor = -1;\n  let output = \"\";\n  for (const node of nodes) {\n    if (overlaps([selectStart, selectEnd], [node.start, node.end])) {\n      output += printNode(source, node as TexNode, options);\n    } else {\n      output += source.slice(node.start, node.end);\n    }\n\n    if (node.start < selectEnd && selectEnd <= node.end) {\n      cursor = node.type !== \"PlainText\" ? output.length : output.length - (node.end - selectEnd);\n    }\n  }\n\n  return {\n    text: output,\n    cursor,\n  };\n}\n\nexport function convert(\n  text: string,\n  selectStart: number,\n  selectEnd: number,\n  options: Options = {}\n): { text: string; cursor: number } {\n  selectEnd = Math.min(selectEnd, text.length);\n  // The parser is not supposed to throw error by design.\n  const ast = parser.tryParse(text);\n  return print(text, ast, selectStart, selectEnd, options);\n}\n\n/**\n * Convert TeX in textarea or \"contentEditable\", and then set cursor.\n */\nexport function render(element: HTMLElement, options: Options): void {\n  if (element.tagName === \"INPUT\" || element.tagName === \"TEXTAREA\") {\n    const textarea = element as HTMLInputElement | HTMLTextAreaElement;\n    const selectionStart = textarea.selectionStart || 0;\n    const selectionEnd = textarea.selectionEnd || 0;\n    const { text, cursor } = convert(textarea.value, selectionStart, selectionEnd, options);\n    textarea.select();\n    element.ownerDocument.execCommand(\"insertText\", false, text);\n    textarea.selectionStart = textarea.selectionEnd = cursor;\n  }\n  // contenteditable elements: ex. Gmail message body.\n  else if (element.contentEditable) {\n    const selection = element.ownerDocument.getSelection();\n    if (!selection) {\n      return;\n    }\n    if (!selection.anchorNode || !selection.focusNode) {\n      return;\n    }\n    const nodesBetweenNodes = findNodesBetweenNodes(selection.anchorNode, selection.focusNode);\n\n    const [startNode] = nodesBetweenNodes;\n    const endNode = nodesBetweenNodes[nodesBetweenNodes.length - 1];\n\n    const selectionIsForward =\n      startNode === selection.anchorNode && selection.anchorOffset <= selection.focusOffset;\n\n    const [startCursor, endCursor] = selectionIsForward\n      ? [selection.anchorOffset, selection.focusOffset]\n      : [selection.focusOffset, selection.anchorOffset];\n\n    const TEXT_NODE_TYPE = 3;\n    let _cursor;\n    for (const node of nodesBetweenNodes) {\n      if (node.nodeType === TEXT_NODE_TYPE) {\n        const selectionStart = node === nodesBetweenNodes[0] ? startCursor : 0;\n        const selectionEnd =\n          node === nodesBetweenNodes[nodesBetweenNodes.length - 1]\n            ? endCursor\n            : node.nodeValue?.length || 0;\n        const { text, cursor } = convert(\n          node.nodeValue || \"\",\n          selectionStart,\n          selectionEnd,\n          options\n        );\n        node.nodeValue = text;\n        _cursor = cursor;\n      }\n    }\n\n    selection.collapse(endNode, _cursor);\n  }\n}\n\nexport { symbols, parser };\n","import \"./main.css\";\nimport * as TexToUnicode from \"../lib/index.js\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Initialize the symbol table\n  function renderSymbols() {\n    const symbols = TexToUnicode.symbols;\n    return Object.entries(symbols)\n      .map(\n        ([a, b]) =>\n          `<div class=\"symbol-entry\">\n        <span class=\"symbol-key\">${a}</span>\n        <span class=\"symbol-value\">${b}</span>\n      </div>`\n      )\n      .join(\"\\n\");\n  }\n\n  const symbolTable = document.querySelector(\".symbol-table\");\n  if (symbolTable) {\n    symbolTable.innerHTML = renderSymbols();\n  }\n\n  // Setup the textarea demo\n  const textarea = document.querySelector(\".try-here\") as HTMLTextAreaElement;\n  if (textarea) {\n    textarea.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"w\" && (ev.altKey === true || ev.ctrlKey)) {\n        TexToUnicode.render(textarea, { subscripts: true });\n      }\n    });\n  }\n});\n"],"names":["symbols","findNodesBetweenNodes","u","v","ancestor","findLowestCommonAncestor","childrenList","findChildrenList","i","j","findAncestorChain","node","chain","currentNode","uChain","vChain","list","find","n","child","Parser","action","input","location","context","Context","result","eof","expected","line","column","message","parserB","a","b","value","fn","ok","before","after","beforeAndAfter","min","max","isRangeValid","items","separator","x","first","rest","name","all","start","end","match","regexp","flag","sticky","string","parsers","acc","p","array","choice","union","options","index","chunk","ch","makeNode","type","parser","bnb.all","bnb.location","Spaces","bnb.match","Superscript","bnb.choice","Subscript","_","NullaryMacro","CurlyGroup","UnaryMacro","c","Illegal","PlainText","Program","nodes","overlaps","d","debrackets","s","printSource","source","printNode","arugmentText","key","r","h","print","ast","selectStart","selectEnd","cursor","output","convert","text","render","element","textarea","selectionStart","selectionEnd","selection","nodesBetweenNodes","startNode","endNode","selectionIsForward","startCursor","endCursor","TEXT_NODE_TYPE","_cursor","renderSymbols","TexToUnicode.symbols","symbolTable","ev","TexToUnicode.render"],"mappings":"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","x_google_ignoreList":[2]}